
; // ===== e-Day development manual ===== //


[admin-files]
; all of these are not defined
admin_directory=eday
admin_classes_directory=eday/kitchen
admin_pages_directory=eday/pages
admin_script_directory=eday/script
admin_config_file=eday/config.ini
; --- public files ---
admin_public_directory=files/kitchen
admin_css_directory=files/kitchen/css
admin_fonts_directory=files/kitchen/fonts
admin_images_directory=files/kitchen/images


[admin-properties]
; dynamic public only
admin::error
  --> string of error; default: false;

admin::error_level
  --> int of error level; default: 0


[admin-methods]

; ----- dynamic -----
admin::start(void) :dynamic
  --> return: mixed of result of executed admin method

admin::isLoaded($str) :dynamic
  --> parameters:
        $str = string of class name
  --> return: bool of loaded kitchen set

; ----- static [require logged in admin access] -----
admin::html($page)
  --> load page from eday/pages/{$page}.php
      - these files are viewers
  --> parameters:
        $page = string of page name
  --> return: bool of loaded

admin::redirect($path)
  --> parameters:
        $path = string of admin path
  --> result: void; redirect to ?admin={$path}

admin::appURL($path) 
  --> parameters:
        $path = string of surfix of admin path
  --> result: string of generated admin theme path
        e.g.: https://127.0.0.1:9301/files/kitchen/{$path}

admin::token(void)
  --> return: string of generated eday token; e.g.: eday-pqr40i

admin::config($key,$config)
  --> get config from config.ini in admin dir
  --> parameters:
        $key    = string of config key
        $config = string of config name; default: config
  --> return: mixed config data

admin::editorPath(void)
  --> return: string of path of editor js file

; ----- static public [without login] -----
admin::isLogin(void)
  --> return: bool of user is login or not

admin::hasAccess(void)
  --> return: bool of user has access or not


[sdb-api-methods]
; 
; $_GET['client'] = ajax --> base64_encode --> json_encode
;                   none --> base64_encode --> serialize
; client require: $_POST['sdb']
;   --> timezone --> string of timezone (optional)
;   --> username --> string of username [a-z0-9]+
;   --> password --> string of password
;   --> db       --> string of database name
;   --> --- only-one-request --- query, queries, connect
;   --> query     --> string of single query
;   --> queries   --> string of queries
;   --> connect   --> void
; 
; 

[api-methods]
; this class is still a prototype --> [PROTOTYPE]
; dunno when it's gonna be finished
; $_GET['client'] = ajax --> base64_encode --> json_encode
;                   none --> base64_encode --> serialize
; client require: $_POST['eday']
;   --> timezone --> string of timezone (optional)
;   --> username --> string of username [a-z0-9]+
;   --> password --> string of password
;   --> request  --> string of request method
;   --> args     --> array of arguments


[apix-methods]
; apix is the extended api class to extend to another api class
; that's why all of methods are final protected
; usage: class myAPI extends apix
; in myAPI::__construct or some method --> use $this->start(); to start the api
; 


apix::head(void) :protected
  --> generate api headers

apix::result($str) :protected
  --> quit using string of result
  --> parameters:
        $str = string of output print of result
  --> result: void
  
apix::error($str) :protected
  --> quit using error string of result
  --> parameters:
        $str = string of error output print of result
  --> result: void

apix::start(void) :protected
  --> generated of children method
  --> return: result of api method itself


[base-methods]

base::timeAgo($str)
  --> generate time ago using date string of int time
  --> parameters:
        $str = string of date string, or int of time
  --> return: string of generated time ago

base::price($str)
  --> generate price from numeric
  --> parameters:
        $str = numeric or int of price
  --> return: string of generated price

base::parseMenuChildren($menus)
  --> generate children of menu
  --> parameters:
        $menus = array of menu from table menus
  --> return array of generated children of menus

base::parseMenu($menus)
  --> recursively generate parent of menu
  --> parameters:
        $menus = array of menu, generated by base::parseMenuChildren
  --> return array of generated parent of menus


[get-methods]

get::timezones(void)
  --> return: array of timezones;
      - key   = string of timezone name of set
      - value = string of timezone info

get::visitors(void)
  --> get visitors number from site.visitors in theme dir
  --> return: int of number of visitors

get::products($limit)
  --> get generated product data
  --> parameters:
        $limit = int of limit point; default: 9
  --> return: array of products

get::menus($type)
  --> get generated menus, parented and children
  --> parameters:
        $type = string of type of menu; default: null
  --> return: array of selected type of menus, or all menus

get::posts($limit)
  --> get generated post data
  --> parameters:
        $limit = int of limit point; default: 10
  --> return: array of posts

get::info(void)
  --> return: object of site info
      - name        = string of site name
      - description = string of site description
      - keyword     = string of site keywords

get::menuParents(void)
  --> return: array of data table menus; id,name,type

get::tags(void)
  --> return: array of tag names including count

get::tagData($get)
  --> get table data by tags from selected table
  --> parameters
        $get = string of tag path; e.g.:
               - post/software (for tag software in table posts)
               - product/drink (for tag drink in table products)
  --> return: array of data from selected table

get::tagTID($tid,$type)
  --> get tag by tag id
  --> parameters:
        $tid  = int of tag id
        $type = string of tag type
  --> return: array of selected tag id


[site-properties]

site::host
  --> alias of EDAT_HOST
  --> string of hostname; e.g.: 9r3i.web.id

site::port
  --> alias of EDAY_PORT
  --> int of site port; e.g.: 443 (ssl) or 80

site::protocol
  --> alias of EDAY_PROTOCOL
  --> string of site protocol; e.g.: https (ssl) or https

site::referer
  --> alias of EDAY_REF
  --> string of referer address

site::start
  --> alias of EDAY_TIME_START
  --> float of started engine in microtime

site::request
  --> alias of EDAY_REQUEST
  --> string of data from $_GET['__EDAY_REQUEST__']

site::path
  --> alias of EDAY_PATH
  --> string of base path of site

site::url
  --> alias of EDAY_ADDR
  --> string of site base address; protocol, host, port and base path

site::uri
  --> alias of EDAY_URI
  --> string of site uri; full address including get query

site::ruri
  --> alias of EDAY_REQUEST_URI
  --> string of site uri without site base address


[site-methods]

site::engine(void)
  --> initialize the engine, only once
  --> return: object of eday started engine

site::config($key)
  --> get site configuration
  --> parameters:
        $key = string of config key; default: null
               arguments keys:
               name        = string of site name
               description = string of site description
               keyword     = string of site keywords
               theme       = string of theme name
               api         = bool of allow api access
               dbapi       = bool of allow database api access
               timezone    = string of timezone
  --> return: string of config or object of configs, or error in failed

site::adminKey(void)
  --> get admin keys
  --> return: string of admin key

site::defined(void)
  --> get all user defined constants
  --> return: array of all user defined constants

site::themeURL($path)
  --> parameters:
        $path = string of next path; default: blank
  --> return: string of full path to theme, including site address

site::db(void)
  --> connect into sdb, database name: site
  --> return: object of connected sdb

site::product($id,&$error,$start,$limit)
  --> get product data from table products
  --> paremeters:
        $id     = int of product id; default: null
        &$error = mixed of error statement in return
        $start  = int of starting point in select; default: 0
        $limit  = int of limited point in select; default: 9
  --> return: array of products, or false on failed, followed by error statement

site::post($id,&$error,$start,$limit)
  --> get post data from table posts
  --> paremeters:
        $id     = int of post id; default: null
        &$error = mixed of error statement in return
        $start  = int of starting point in select; default: 0
        $limit  = int of limited point in select; default: 10
  --> return: array of posts, or false on failed, followed by error statement

site::user($id,&$error,$start,$limit)
  --> get user data from table users
  --> paremeters:
        $id     = int of user id; default: null
        &$error = mixed of error statement in return
        $start  = int of starting point in select; default: 0
        $limit  = int of limited point in select; default: 10
  --> return: array of users, or false on failed, followed by error statement

site::productRow(&$error)
  --> get total row of table products
  --> parameters:
        &$error = mixed of error statement in return
  --> return: int of product rows, or false on failed, followed by error statement

site::postRow(&$error)
  --> get total row of table posts
  --> parameters:
        &$error = mixed of error statement in return
  --> return: int of post rows, or false on failed, followed by error statement

site::userRow(&$error)
  --> get total row of table users
  --> parameters:
        &$error = mixed of error statement in return
  --> return: int of user rows, or false on failed, followed by error statement


[constants]
EDAY=true
EDAY_ROOT=/home/isa/9r3i/www/client-projects/relabaik.com/api/eday/
EDAY_INDEX_DIR=/home/isa/9r3i/www/client-projects/relabaik.com/api/
EDAY_SERVER_IP=127.0.0.1
EDAY_USER_AGENT=Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0
EDAY_REMOTE_IP=127.0.0.1
EDAY_PORT=80
EDAY_PROTOCOL=http
EDAY_HOST=127.0.0.1
EDAY_REF=http://127.0.0.1/client-projects/relabaik.com/
EDAY_INDEX_PATH=/client-projects/relabaik.com/api/
EDAY_DOC_ROOT=/home/isa/9r3i/www
EDAY_ADDR=http://127.0.0.1/client-projects/relabaik.com/api/
EDAY_URI=http://127.0.0.1/client-projects/relabaik.com/api/
EDAY_PATH=
EDAY_REQUEST_URI=
EDAY_TIME_START=1571447316.682
EDAY_REQUEST=
EDAY_CONFIG=serialized array of config; name, description, keyword, theme, api, dbapi, timezone
EDAY_ALLOW_API_ACCESS=1
EDAY_ACCESS_TOKEN=eday-vDa6OX8fsAWJEwfZbRpUDC6lM0


--> EDAY_THEME_PATH -- EDAY_THEME_DIR (transition)

EDAY_APP_DIR=/home/isa/9r3i/www/client-projects/relabaik.com/api/apps/
EDAY_APP_PATH=http://127.0.0.1/client-projects/relabaik.com/api/apps/

           --> EDAY_THEMES (transition)
EDAY_APPS=serialized array of themes; each one is object of theme data
            --> this can be override in info.ini in theme directory
            --> key of array is theme namespace
            - namespace
            - name
            - description
            - version
            - uri
            - author_name
            - author_email
            - author_uri
            - update_uri
            - index        = index file of theme; default: default.php
            - config       = config file of theme; default: config.ini

EDAY_INITIALIZED=1
EDAY_ENGINE_STARTED=1



[constants-js]
SITE_URL=EDAY_ADDR
SITE_ADMIN_KEY=EDAY_ADMIN_KEY

[constants-admin]
EDAY_ADMIN_PATH=path of admin path; e.g.: option/settings
EDAY_ADMIN_DIR=directory of admin; e.g.: /site/eday/
EDAY_EDITOR_PATH=path of editor; e.g.: http://127.0.0.1/files/editors/
EDAY_ADMIN_TOKEN=string of eday admin token;
EDAY_ADMIN_USERNAME=string of username;
EDAY_ADMIN_TYPE=string of type; e.g.: admin, editor, member
EDAY_ADMIN_ID=int of admin id;
EDAY_ADMIN_KEY=string of query key of get admin


[end-of-file]




































